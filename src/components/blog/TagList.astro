---
interface Props {
  tags: string[];
  currentTag?: string;
}

const { tags, currentTag } = Astro.props;

// 統計每個標籤的使用次數
const tagCounts = tags.reduce(
  (acc, tag) => {
    acc[tag] = (acc[tag] || 0) + 1;
    return acc;
  },
  {} as Record<string, number>
);

const uniqueTags = Object.keys(tagCounts).sort();
---

<div class='bg-white rounded-lg shadow-md p-6'>
  <h3 class='text-lg font-semibold text-gray-900 mb-4'>標籤</h3>

  {
    uniqueTags.length > 0 ? (
      <div class='flex flex-wrap gap-2'>
        <a
          href='/blog'
          class={`px-3 py-1 rounded-full text-sm transition-colors ${
            !currentTag ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
          }`}>
          全部 ({tags.length})
        </a>

        {uniqueTags.map(tag => (
          <a
            href={`/blog/tag/${tag}`}
            class={`px-3 py-1 rounded-full text-sm transition-colors ${
              currentTag === tag
                ? 'bg-blue-600 text-white'
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}>
            #{tag} ({tagCounts[tag]})
          </a>
        ))}
      </div>
    ) : (
      <p class='text-gray-500'>還沒有標籤</p>
    )
  }
</div>
